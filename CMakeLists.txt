cmake_minimum_required(VERSION 3.16)
project(eos VERSION 0.0.1)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_FLAGS_RELEASE "-O3")
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if (CMAKE_BUILD_TYPE MATCHES Debug)
    set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib/debug)
    add_compile_definitions(DEBUG SPDLOG_ACTIVE_LEVEL=0)
else ()
    set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib/release)
    add_compile_definitions(SPDLOG_ACTIVE_LEVEL=2)
endif ()
set(eos_SOURCE_FILES src/core/GameEngine.cpp include/eos/core/GameEngine.hpp include/eos/scene/IGameState.hpp src/scene/StateManager.cpp include/eos/scene/StateManager.hpp src/utils.cpp include/eos/utils.hpp src/core/io/Config.cpp include/eos/core/io/Config.hpp src/Constants.cpp include/eos/Constants.hpp src/scene/resources/Shader.cpp include/eos/scene/resources/Shader.h src/stb_image.cpp src/scene/resources/Texture.cpp include/eos/scene/resources/Texture.h src/scene/3d/GameObject.cpp include/eos/scene/3d/GameObject.h src/core/ServiceProvider.cpp include/eos/core/ServiceProvider.h src/scene/Window.cpp include/eos/scene/Window.h src/scene/3d/ArcballCamera.cpp include/eos/scene/3d/ArcballCamera.h src/scene/3d/Camera.cpp include/eos/scene/3d/Camera.hpp)

if (WIN32)
    # ENV: BOOST_ROOT=I:\Programmieren\CCPP\Libraries\boost_1_70_0;BOOST_LIBRARYDIR=I:\Programmieren\CCPP\Libraries\boost_1_70_0\stage\lib;GLFW=I:\Programmieren\CCPP\Libraries\glfw-3.3;GLEW_ROOT=I:\Programmieren\CCPP\Libraries\glew-2.1.0
    set(Boost_USE_STATIC_LIBS ON)
    set(Boost_USE_MULTITHREADED ON)
    set(Boost_USE_STATIC_RUNTIME ON)
    set(Boost_ARCHITECTURE "-x64")

    #set(CMAKE_PREFIX_PATH $ENV{GLEW_ROOT}/include)
    #set(CMAKE_LIBRARY_PATH $ENV{GLEW_ROOT}/lib/Release/x64/)
else (WIN32)
    add_compile_definitions(BOOST_LOG_DYN_LINK)
endif (WIN32)

if (WIN32)
    find_library(GLFW_LIBRARIES glfw3 PATHS $ENV{GLFW} PATH_SUFFIXES "lib-mingw-w64")
    set(GLFW_INCLUDE_DIRS $ENV{GLFW}/include)
else (WIN32)
    find_package(PkgConfig REQUIRED)
    pkg_search_module(GLFW REQUIRED glfw3)
endif (WIN32)
add_compile_definitions(DGLFW_INCLUDE_NONE)
find_package(OpenGL REQUIRED)
#find_package(Boost COMPONENTS log REQUIRED)
find_package(fmt REQUIRED)
find_package(glm REQUIRED)
find_package(spdlog REQUIRED)
find_package(RapidJSON REQUIRED)

include_directories(${CMAKE_SOURCE_DIR}/include ${GLFW_INCLUDE_DIRS} ${OPENGL_INCLUDE_DIRS} ${RAPIDJSON_INCLUDE_DIRS})

add_library(eos STATIC ${eos_SOURCE_FILES})
target_link_libraries(eos PUBLIC ${GLFW_LIBRARIES} ${OPENGL_LIBRARY} fmt::fmt spdlog::spdlog glad mango glm)
target_include_directories(eos PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)